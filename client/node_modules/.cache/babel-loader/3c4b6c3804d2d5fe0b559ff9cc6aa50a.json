{"ast":null,"code":"export default {\n  // TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:\n  // ======================================================================================================================\n  // TODO: Figure out how to get this to return the thign its suppposed to return.\n  // ======================================================================================================================\n  // REMINDER: REMINDER: REMINDER: REMINDER: REMINDER: REMINDER: REMINDER: REMINDER: \n  // ======================================================================================================================\n  // REMINDER: : REMEMBER THAT HEROKU CAN\"T USE LOCALHOST BRUH\n  // ======================================================================================================================\n  getAllUsers: function getAllUsers() {\n    return fetch(\"/users\").then(function (res) {\n      return res.json();\n    });\n  },\n  saveUser: function saveUser(user) {\n    fetch(\"/saveUser\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(user)\n    });\n  },\n  saveItem: function saveItem(user) {\n    fetch(\"/saveItem\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(user)\n    });\n  },\n  updateItem: function updateItem(itemData, id) {\n    console.log(\"THE ITEM DATA IS THIS N =32409I0987\");\n    console.log(itemData);\n    fetch(\"/updateItem/\".concat(id), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(itemData)\n    }).then(function (res) {\n      return res.json();\n    });\n  },\n  //   getAllUsers: function () {\n  //   return fetch(\"/users\").then(res => res.json())\n  // },\n  getAllItems: function getAllItems() {\n    return fetch(\"/inventory\").then(function (res) {\n      return res.json();\n    });\n  },\n  getItem: function getItem(id) {\n    return fetch(\"/edit/\".concat(id)).then(function (res) {\n      return res.json();\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n}; // updateItem: function (id) {\n//   fetch(`/updateItem/${id}`, {\n//     method: \"PUT\",\n//     headers: { \"Content-Type\": \"application/json\" },\n//     body: JSON.stringify()\n//   })\n// },\n// updateItem: function () {\n//   fetch(\"/api/workouts/:id\", (req, res) => {\n//     Inven\n//   })\n// }\n//   (\"/api/workouts/:id\", (req, res) => {\n//   Workout.findByIdAndUpdate(req.params.id, { $push: { exercises: req.body } }, { useFindAndModify: false })\n//     .then((data) => {\n//       res.json(data);\n//     }).catch((err) => {\n//       res.json(err);\n//     });\n// });\n// Deletes the post with the given id\n//   deletePost: function(id) {\n//     return axios.delete(\"/api/posts/\" + id);\n//   },\n//   deleteMethod: {\n//     method: 'DELETE', // Method itself\n//     headers: {\n//      'Content-type': 'application/json; charset=UTF-8' // Indicates the content \n//     },\n//     // No need to have body, because we don't send nothing to the server.\n//    }\n//    // Make the HTTP Delete call using fetch api\n//    fetch(url, deleteMethod) \n//    .then(response => response.json())\n//    .then(data => console.log(data)) // Manipulate the data retrieved back, if we want to do something with it\n//    .catch(err => console.log(err)) // Do something with the error\n//    deleteUser: function (user) {fetch(\"/saveUser\", {\n//     method: \"DELETE\",\n//     headers: { \"Content-Type\": \"application/json\" },\n//   })}\n// };","map":{"version":3,"sources":["/Users/josh/hw/cart-croc/client/src/utils/API.js"],"names":["getAllUsers","fetch","then","res","json","saveUser","user","method","headers","body","JSON","stringify","saveItem","updateItem","itemData","id","console","log","getAllItems","getItem","catch","error"],"mappings":"AAAA,eAAe;AACb;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEAA,EAAAA,WAAW,EAAE,uBAAY;AACvB,WAAOC,KAAK,CAAC,QAAD,CAAL,CAAgBC,IAAhB,CAAqB,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KAAxB,CAAP;AACD,GAdY;AAgBbC,EAAAA,QAAQ,EAAE,kBAAUC,IAAV,EAAgB;AACxBL,IAAAA,KAAK,CAAC,WAAD,EAAc;AACjBM,MAAAA,MAAM,EAAE,MADS;AAEjBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFQ;AAGjBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;AAHW,KAAd,CAAL;AAKD,GAtBY;AAwBbM,EAAAA,QAAQ,EAAE,kBAAUN,IAAV,EAAgB;AACxBL,IAAAA,KAAK,CAAC,WAAD,EAAc;AACjBM,MAAAA,MAAM,EAAE,MADS;AAEjBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFQ;AAGjBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;AAHW,KAAd,CAAL;AAKD,GA9BY;AAgCbO,EAAAA,UAAU,EAAE,oBAAUC,QAAV,EAAoBC,EAApB,EAAwB;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAb,IAAAA,KAAK,uBAAgBc,EAAhB,GAAsB;AACzBR,MAAAA,MAAM,EAAE,MADiB;AAEzBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFgB;AAGzBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeG,QAAf;AAHmB,KAAtB,CAAL,CAIGZ,IAJH,CAIQ,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KAJX;AAKD,GAxCY;AA0Cb;AACA;AACA;AAEAc,EAAAA,WAAW,EAAE,uBAAY;AACvB,WAAOjB,KAAK,CAAC,YAAD,CAAL,CAAoBC,IAApB,CAAyB,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KAA5B,CAAP;AACD,GAhDY;AAkDbe,EAAAA,OAAO,EAAE,iBAAUJ,EAAV,EAAc;AACrB,WAAOd,KAAK,iBAAUc,EAAV,EAAL,CAAqBb,IAArB,CAA0B,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KAA7B,EACLgB,KADK,CACC,UAACC,KAAD,EAAW;AACjBL,MAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACD,KAHM,CAAP;AAID;AAvDY,CAAf,C,CAkEE;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["export default {\n  // TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:\n  // ======================================================================================================================\n  // TODO: Figure out how to get this to return the thign its suppposed to return.\n  // ======================================================================================================================\n\n\n  // REMINDER: REMINDER: REMINDER: REMINDER: REMINDER: REMINDER: REMINDER: REMINDER: \n  // ======================================================================================================================\n  // REMINDER: : REMEMBER THAT HEROKU CAN\"T USE LOCALHOST BRUH\n  // ======================================================================================================================\n\n  getAllUsers: function () {\n    return fetch(\"/users\").then(res => res.json())\n  },\n\n  saveUser: function (user) {\n    fetch(\"/saveUser\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(user)\n    })\n  },\n\n  saveItem: function (user) {\n    fetch(\"/saveItem\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(user)\n    })\n  },\n\n  updateItem: function (itemData, id) {\n    console.log(\"THE ITEM DATA IS THIS N =32409I0987\")\n    console.log(itemData)\n    fetch(`/updateItem/${id}`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(itemData)\n    }).then(res => res.json());\n  },\n\n  //   getAllUsers: function () {\n  //   return fetch(\"/users\").then(res => res.json())\n  // },\n\n  getAllItems: function () {\n    return fetch(\"/inventory\").then(res => res.json())\n  },\n\n  getItem: function (id) {\n    return fetch(`/edit/${id}`).then(res => res.json()\n    ).catch((error) => {\n      console.log(error);\n    })\n  }\n\n};\n\n\n\n\n\n\n\n\n  // updateItem: function (id) {\n  //   fetch(`/updateItem/${id}`, {\n  //     method: \"PUT\",\n  //     headers: { \"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify()\n  //   })\n  // },\n\n  // updateItem: function () {\n  //   fetch(\"/api/workouts/:id\", (req, res) => {\n  //     Inven\n  //   })\n  // }\n  //   (\"/api/workouts/:id\", (req, res) => {\n  //   Workout.findByIdAndUpdate(req.params.id, { $push: { exercises: req.body } }, { useFindAndModify: false })\n  //     .then((data) => {\n  //       res.json(data);\n  //     }).catch((err) => {\n  //       res.json(err);\n  //     });\n  // });\n\n  // Deletes the post with the given id\n  //   deletePost: function(id) {\n  //     return axios.delete(\"/api/posts/\" + id);\n  //   },\n\n  //   deleteMethod: {\n  //     method: 'DELETE', // Method itself\n  //     headers: {\n  //      'Content-type': 'application/json; charset=UTF-8' // Indicates the content \n  //     },\n  //     // No need to have body, because we don't send nothing to the server.\n  //    }\n  //    // Make the HTTP Delete call using fetch api\n  //    fetch(url, deleteMethod) \n  //    .then(response => response.json())\n  //    .then(data => console.log(data)) // Manipulate the data retrieved back, if we want to do something with it\n  //    .catch(err => console.log(err)) // Do something with the error\n\n  //    deleteUser: function (user) {fetch(\"/saveUser\", {\n  //     method: \"DELETE\",\n  //     headers: { \"Content-Type\": \"application/json\" },\n  //   })}\n  // };\n"]},"metadata":{},"sourceType":"module"}